#!/bin/bash -l
#$ -S /bin/bash
#$ -cwd
#$ -j y
#$ -m eas
#$ -N make_ucsc_references

# Build a set of reference FASTA files and indexes for a given UCSC genome build
# Adam Gower, based on script by Josh Campbell, originally derived from:
# https://github.com/infphilo/hisat2/tree/master/scripts/make_hg19.sh

# Parse command-line arguments
eval set -- "$(
  getopt --options=b:o: \
         --longoptions=build:,output-path: \
         --name "$0" -- "$@"
)"

while true
do
  case "$1" in
    -b|--build)
      ucsc_build="$2"
      shift 2 ;;
    -o|--output-path)
      output_path="$(readlink --canonicalize "$2")"
      shift 2 ;;
    --)
      shift
      break ;;
    *)
      echo "Internal error"
      exit 1 ;;
  esac
done

if [[ ${ucsc_build} == "" ]]
then
  echo    "Usage:"
  echo    "  qsub [qsub flags] make_ucsc_references.qsub"
  echo    "       [options] -b|--build [UCSC genome build]"
  echo    "Options:"
  echo -n "  -b, --build          "
  echo    "UCSC genome build (e.g., hg38, mm10, etc.)"
  echo -n "  -o, --output-path    "
  echo -n "Path where output will be written "
  echo    "(will be created if it does not exist)"
  echo    "                       (Default: ./[UCSC genome build]/)"
else
  # If output path is not specified, a directory named with the UCSC genome
  # build will be created within the current working directory, and output will
  # be written there
  [[ "${output_path}" == "" ]] && output_path="$(pwd)/${ucsc_build}"

  # Load and list modules
  module load bwa
  module load picard
  module load samtools
  module list

  # Define URLs
  ucsc_base_url="ftp://hgdownload.cse.ucsc.edu"
  bigZips_url="${ucsc_base_url}/goldenPath/${ucsc_build}/bigZips"
  app_url="${ucsc_base_url}/admin/exe/linux.x86_64"

  # Define filenames
  twobit_file="${ucsc_build}.2bit"
  chrom_sizes_file="${ucsc_build}.chrom.sizes"
  seqList_file="${ucsc_build}.seqList"

  # Define regular expressions
  # Note: hg19 includes alternative haplotypes in files named chr*_hap*.fa
  #       hg38 includes alternative haplotypes in files named chr*_alt.fa
  declare -A regexes=(
    ["random"]="^chr(.+_.+_random|Un_.+)$"
    ["althap"]="^chr.+_(alt|hap.+)$"
  )

  # Display the parsed arguments
  echo "UCSC genome build: ${ucsc_build}"
  echo "FASTA file and indexes will be written to: ${output_path}/"

  # Prepare for download
  cd $TMPDIR/ || exit
  echo "Retrieving files from ${bigZips_url}/ to: $TMPDIR"

  # Try retrieving each file from UCSC to scratch space;
  # if files could not be retrieved due to fatal error, terminate
  for filename in ${twobit_file} "md5sum.txt"
  do
    wget ${bigZips_url}/${filename}
    if [[ ! -e ${filename} ]]
    then
      echo "File '${filename}' could not be retrieved; terminating."
      exit
    fi
  done

  # Verify MD5 checksum and print a message, terminating on invalid MD5 checksum
  if $(grep "${twobit_file}" md5sum.txt | md5sum --check --status)
  then
    echo "File '${twobit_file}' was retrieved correctly; proceeding."
  else
    echo "File '${twobit_file}' was not retrieved correctly; terminating."
    exit
  fi

  # Retrieve UCSC apps and make them executable
  for app in twoBitInfo twoBitToFa
  do
    wget ${app_url}/${app}
    chmod +x ${app}
  done

  # Create the output path if it does not already exist
  [ ! -d "${output_path}" ] && mkdir --verbose -p "${output_path}"/ 
  # Ensure directory is not world-readable yet (to keep others out until ready)
  chmod 2700 "${output_path}"/

  # Generate chrom.sizes file from .2bit file
  ./twoBitInfo "${twobit_file}" "${chrom_sizes_file}"

  # Iterate over each subset of contigs,
  # adding them sequentially (if they are included) to a new FASTA reference
  for chrom_subset in base random althap
  do
    if [[ ${chrom_subset} == "base" ]]
    then
      # Initialize contig set name
      chrom_set_name="${chrom_subset}"
      # Extract list of "base" contigs to text file
      # (i.e., those that do _not_ match any of the regexes)
      cut -f1 "${chrom_sizes_file}" \
        | grep -E -v -f <(printf "%s\n" "${regexes[@]}") \
        > "${seqList_file}"
    else
      # If any contigs match the regex corresponding to the subset, proceed
      if grep -E -q "${regexes[${chrom_subset}]}" "${chrom_sizes_file}"
      then
        # Append subset name to contig set name
        chrom_set_name="${chrom_set_name}_${chrom_subset}"
        # Append any contigs that match the regex to the text file
        cut -f1 "${chrom_sizes_file}" | grep -E "${regexes[${chrom_subset}]}" \
          >> "${seqList_file}"
      else
        break
      fi
    fi
    # If the for-loop was not exited, create a directory named after contig set
    mkdir --verbose --mode=2700 "${output_path}"/${chrom_set_name}/
    # Generate a FASTA file from the .2bit file
    fa_file="${output_path}"/${chrom_set_name}/${ucsc_build}.fa
    ./twoBitToFa -seqList="${seqList_file}" "${twobit_file}" "${fa_file}"
    # Make indices and sequence dictionary from the FASTA file
    bwa index -a bwtsw "${fa_file}"
    samtools faidx "${fa_file}"
    # Note: this step calls a wrapper script named 'picard' that calls Java
    #       with the 'picard.jar' file and 2GB maximum heap size
    picard CreateSequenceDictionary \
      REFERENCE="${fa_file}" OUTPUT="${fa_file%.fa}.dict"
  done

  # Make all output files and directories world-readable and read-only
  chmod -Rc ugo-w,ugo+rX "${output_path}"/
fi
